// Code generated by counterfeiter. DO NOT EDIT.
package execfakes

import (
	"sync"

	"code.cloudfoundry.org/clock"
	"code.cloudfoundry.org/lager"
	"github.com/concourse/atc"
	"github.com/concourse/atc/dbng"
	"github.com/concourse/atc/exec"
	"github.com/concourse/atc/worker"
)

type FakeFactory struct {
	GetStub        func(logger lager.Logger, teamID int, buildID int, plan atc.Plan, stepMetadata exec.StepMetadata, workerMetadata dbng.ContainerMetadata, delegate exec.GetDelegate) exec.StepFactory
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		logger         lager.Logger
		teamID         int
		buildID        int
		plan           atc.Plan
		stepMetadata   exec.StepMetadata
		workerMetadata dbng.ContainerMetadata
		delegate       exec.GetDelegate
	}
	getReturns struct {
		result1 exec.StepFactory
	}
	getReturnsOnCall map[int]struct {
		result1 exec.StepFactory
	}
	PutStub        func(lager.Logger, int, int, atc.PlanID, exec.StepMetadata, dbng.ContainerMetadata, exec.PutDelegate, atc.ResourceConfig, atc.Tags, atc.Params, atc.VersionedResourceTypes, *atc.Version) exec.StepFactory
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		arg1  lager.Logger
		arg2  int
		arg3  int
		arg4  atc.PlanID
		arg5  exec.StepMetadata
		arg6  dbng.ContainerMetadata
		arg7  exec.PutDelegate
		arg8  atc.ResourceConfig
		arg9  atc.Tags
		arg10 atc.Params
		arg11 atc.VersionedResourceTypes
		arg12 *atc.Version
	}
	putReturns struct {
		result1 exec.StepFactory
	}
	putReturnsOnCall map[int]struct {
		result1 exec.StepFactory
	}
	TaskStub        func(lager.Logger, int, int, atc.PlanID, worker.ArtifactName, dbng.ContainerMetadata, exec.TaskDelegate, exec.Privileged, atc.Tags, exec.TaskConfigSource, atc.VersionedResourceTypes, map[string]string, map[string]string, string, clock.Clock) exec.StepFactory
	taskMutex       sync.RWMutex
	taskArgsForCall []struct {
		arg1  lager.Logger
		arg2  int
		arg3  int
		arg4  atc.PlanID
		arg5  worker.ArtifactName
		arg6  dbng.ContainerMetadata
		arg7  exec.TaskDelegate
		arg8  exec.Privileged
		arg9  atc.Tags
		arg10 exec.TaskConfigSource
		arg11 atc.VersionedResourceTypes
		arg12 map[string]string
		arg13 map[string]string
		arg14 string
		arg15 clock.Clock
	}
	taskReturns struct {
		result1 exec.StepFactory
	}
	taskReturnsOnCall map[int]struct {
		result1 exec.StepFactory
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFactory) Get(logger lager.Logger, teamID int, buildID int, plan atc.Plan, stepMetadata exec.StepMetadata, workerMetadata dbng.ContainerMetadata, delegate exec.GetDelegate) exec.StepFactory {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		logger         lager.Logger
		teamID         int
		buildID        int
		plan           atc.Plan
		stepMetadata   exec.StepMetadata
		workerMetadata dbng.ContainerMetadata
		delegate       exec.GetDelegate
	}{logger, teamID, buildID, plan, stepMetadata, workerMetadata, delegate})
	fake.recordInvocation("Get", []interface{}{logger, teamID, buildID, plan, stepMetadata, workerMetadata, delegate})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(logger, teamID, buildID, plan, stepMetadata, workerMetadata, delegate)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getReturns.result1
}

func (fake *FakeFactory) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeFactory) GetArgsForCall(i int) (lager.Logger, int, int, atc.Plan, exec.StepMetadata, dbng.ContainerMetadata, exec.GetDelegate) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].logger, fake.getArgsForCall[i].teamID, fake.getArgsForCall[i].buildID, fake.getArgsForCall[i].plan, fake.getArgsForCall[i].stepMetadata, fake.getArgsForCall[i].workerMetadata, fake.getArgsForCall[i].delegate
}

func (fake *FakeFactory) GetReturns(result1 exec.StepFactory) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 exec.StepFactory
	}{result1}
}

func (fake *FakeFactory) GetReturnsOnCall(i int, result1 exec.StepFactory) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 exec.StepFactory
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 exec.StepFactory
	}{result1}
}

func (fake *FakeFactory) Put(arg1 lager.Logger, arg2 int, arg3 int, arg4 atc.PlanID, arg5 exec.StepMetadata, arg6 dbng.ContainerMetadata, arg7 exec.PutDelegate, arg8 atc.ResourceConfig, arg9 atc.Tags, arg10 atc.Params, arg11 atc.VersionedResourceTypes, arg12 *atc.Version) exec.StepFactory {
	fake.putMutex.Lock()
	ret, specificReturn := fake.putReturnsOnCall[len(fake.putArgsForCall)]
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		arg1  lager.Logger
		arg2  int
		arg3  int
		arg4  atc.PlanID
		arg5  exec.StepMetadata
		arg6  dbng.ContainerMetadata
		arg7  exec.PutDelegate
		arg8  atc.ResourceConfig
		arg9  atc.Tags
		arg10 atc.Params
		arg11 atc.VersionedResourceTypes
		arg12 *atc.Version
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12})
	fake.recordInvocation("Put", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12})
	fake.putMutex.Unlock()
	if fake.PutStub != nil {
		return fake.PutStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.putReturns.result1
}

func (fake *FakeFactory) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *FakeFactory) PutArgsForCall(i int) (lager.Logger, int, int, atc.PlanID, exec.StepMetadata, dbng.ContainerMetadata, exec.PutDelegate, atc.ResourceConfig, atc.Tags, atc.Params, atc.VersionedResourceTypes, *atc.Version) {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return fake.putArgsForCall[i].arg1, fake.putArgsForCall[i].arg2, fake.putArgsForCall[i].arg3, fake.putArgsForCall[i].arg4, fake.putArgsForCall[i].arg5, fake.putArgsForCall[i].arg6, fake.putArgsForCall[i].arg7, fake.putArgsForCall[i].arg8, fake.putArgsForCall[i].arg9, fake.putArgsForCall[i].arg10, fake.putArgsForCall[i].arg11, fake.putArgsForCall[i].arg12
}

func (fake *FakeFactory) PutReturns(result1 exec.StepFactory) {
	fake.PutStub = nil
	fake.putReturns = struct {
		result1 exec.StepFactory
	}{result1}
}

func (fake *FakeFactory) PutReturnsOnCall(i int, result1 exec.StepFactory) {
	fake.PutStub = nil
	if fake.putReturnsOnCall == nil {
		fake.putReturnsOnCall = make(map[int]struct {
			result1 exec.StepFactory
		})
	}
	fake.putReturnsOnCall[i] = struct {
		result1 exec.StepFactory
	}{result1}
}

func (fake *FakeFactory) Task(arg1 lager.Logger, arg2 int, arg3 int, arg4 atc.PlanID, arg5 worker.ArtifactName, arg6 dbng.ContainerMetadata, arg7 exec.TaskDelegate, arg8 exec.Privileged, arg9 atc.Tags, arg10 exec.TaskConfigSource, arg11 atc.VersionedResourceTypes, arg12 map[string]string, arg13 map[string]string, arg14 string, arg15 clock.Clock) exec.StepFactory {
	fake.taskMutex.Lock()
	ret, specificReturn := fake.taskReturnsOnCall[len(fake.taskArgsForCall)]
	fake.taskArgsForCall = append(fake.taskArgsForCall, struct {
		arg1  lager.Logger
		arg2  int
		arg3  int
		arg4  atc.PlanID
		arg5  worker.ArtifactName
		arg6  dbng.ContainerMetadata
		arg7  exec.TaskDelegate
		arg8  exec.Privileged
		arg9  atc.Tags
		arg10 exec.TaskConfigSource
		arg11 atc.VersionedResourceTypes
		arg12 map[string]string
		arg13 map[string]string
		arg14 string
		arg15 clock.Clock
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15})
	fake.recordInvocation("Task", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15})
	fake.taskMutex.Unlock()
	if fake.TaskStub != nil {
		return fake.TaskStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.taskReturns.result1
}

func (fake *FakeFactory) TaskCallCount() int {
	fake.taskMutex.RLock()
	defer fake.taskMutex.RUnlock()
	return len(fake.taskArgsForCall)
}

func (fake *FakeFactory) TaskArgsForCall(i int) (lager.Logger, int, int, atc.PlanID, worker.ArtifactName, dbng.ContainerMetadata, exec.TaskDelegate, exec.Privileged, atc.Tags, exec.TaskConfigSource, atc.VersionedResourceTypes, map[string]string, map[string]string, string, clock.Clock) {
	fake.taskMutex.RLock()
	defer fake.taskMutex.RUnlock()
	return fake.taskArgsForCall[i].arg1, fake.taskArgsForCall[i].arg2, fake.taskArgsForCall[i].arg3, fake.taskArgsForCall[i].arg4, fake.taskArgsForCall[i].arg5, fake.taskArgsForCall[i].arg6, fake.taskArgsForCall[i].arg7, fake.taskArgsForCall[i].arg8, fake.taskArgsForCall[i].arg9, fake.taskArgsForCall[i].arg10, fake.taskArgsForCall[i].arg11, fake.taskArgsForCall[i].arg12, fake.taskArgsForCall[i].arg13, fake.taskArgsForCall[i].arg14, fake.taskArgsForCall[i].arg15
}

func (fake *FakeFactory) TaskReturns(result1 exec.StepFactory) {
	fake.TaskStub = nil
	fake.taskReturns = struct {
		result1 exec.StepFactory
	}{result1}
}

func (fake *FakeFactory) TaskReturnsOnCall(i int, result1 exec.StepFactory) {
	fake.TaskStub = nil
	if fake.taskReturnsOnCall == nil {
		fake.taskReturnsOnCall = make(map[int]struct {
			result1 exec.StepFactory
		})
	}
	fake.taskReturnsOnCall[i] = struct {
		result1 exec.StepFactory
	}{result1}
}

func (fake *FakeFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	fake.taskMutex.RLock()
	defer fake.taskMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ exec.Factory = new(FakeFactory)
